//prime algo
#include<bits/stdc++.h>
using namespace std;
int get(int* dis,bool *visited,int n)
{
	int minvertrix=-1;
	for(int i=0;i<n;i++)
	{
		if((visited[i]==false)&&(minvertrix==-1||dis[minvertrix]>dis[i]))
		{
			minvertrix=i;
		}
	}
	return minvertrix;
}
void dijkstra(int **edge,int v)
{
	int *dis=new int[v];
	for(int i=0;i<v;i++)
	{
		dis[i]=INT_MAX;
	}
	dis[0]=0;
	bool *visited=new bool[v]();
	for(int i=0;i<v-1;i++)
	{
		int minvertrix=get(dis,visited,v);
		visited[minvertrix]=true;
		for(int j=0;j<v;j++)
		{
			if(visited[j]==0&&edge[minvertrix][j]!=0)
			{
			    int curr_dis=dis[minvertrix]+edge[minvertrix][j];
				if(curr_dis<dis[j])
				{
				   dis[j]=curr_dis;	
				}	
			}
			
		}
	}
	
	for(int i=0;i<v;i++)
	{
		cout<<i<<" "<<dis[i]<<endl;
	}
	
}
int main()
{
	int v,e;
	cin>>v>>e;//enter the number of node's and number of edge between node
	int **edge=new int*[v];//create 2-d array(dynamically)
	for(int i=0;i<v;i++)
	{
		edge[i]=new int[v];
	}
	//putting weight
	for(int i=0;i<e;i++)
	{
		int x,y,weight;//enter the edge node's and it's correspounding weight
		cin>>x>>y>>weight;
		edge[x][y]=weight;
		edge[y][x]=weight;
	}
	dijkstra(edge,v);//void type ,,DIJKSTRA algorithm
	return 0;
}
/*
input:-
4 4
0 1 3
0 3 5
1 2 1
2 3 8
output:-

0  0
1  3
2  4
3  5
*/
